{"version":3,"sources":["app/results/ResultsContainer.tsx","app/home/HomeComponent.tsx","app/common/LoadingComponent.tsx","app/quiz/QuizComponent.tsx","app/quiz/duck/operations.ts","app/quiz/duck/actions.ts","app/quiz/duck/actionTypes.ts","app/quiz/QuizContainer.ts","app/results/QuestionResponseComponent.tsx","app/results/ResultsComponent.tsx","app/common/NotFoundComponent.tsx","app/App.tsx","app/common/ErrorBoundary.tsx","app/quiz/duck/reducers.ts","reducers.ts","store.ts","RootComponent.tsx","serviceWorker.ts","index.tsx"],"names":["WrappedComponent","HomeComponent","className","id","to","LoadingComponent","src","alt","QuizErrorComponent","StartOverLink","React","memo","QuestionPagination","currentQuestionIndex","totalNumOfQuestions","UserResponseButtons","handleUserResponse","onClick","QuizComponent","history","quiz","questions","loading","error","fetchQuiz","submitAnswer","useState","setCurrentQuestionIndex","useEffect","category","question","length","userResponse","questionIndex","current","push","dispatch","type","Axios","get","then","res","data","results","map","index","decode","correctAnswer","correct_answer","toLowerCase","payload","fetchQuizSuccess","catch","fetchQuizFailed","mapDispatchToProps","operations","connect","state","QuestionResponseRow","correctness","QuestionResponseComponent","q","key","ResultsComponent","score","this","shouldNavigateAway","props","completed","Component","NotFoundComponent","App","exact","path","component","QuizContainer","ResultsContainer","ErrorBoundary","hasError","window","location","reload","refreshPage","children","initialState","rootReducer","combineReducers","action","newState","middlewares","thunk","store","createStore","applyMiddleware","RootComponent","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8bf76603.chunk.js","sourcesContent":["import React, { ReactType } from 'react';\nimport { connect } from 'react-redux';\nimport { History } from 'history';\nimport { Quiz } from '../quiz/duck/types';\nimport { AppState } from '../../reducers';\nimport ResultsComponent from './ResultsComponent';\n\n/**\n * HOC for checking to see if the user has completed the quiz\n * redirects the user to the home page if the quiz is incomplete\n * @function withRedirectIfQuizIncomplete\n * @param WrappedComponent - ReactType\n * @returns {React.Component} - HOC\n */\n\nconst withRedirectIfQuizIncomplete = (WrappedComponent: ReactType) => {\n  return class extends React.Component<{ quiz: Quiz, history: History }> {\n    componentDidMount() {\n      this.shouldNavigateAway();\n    }\n\n    shouldNavigateAway() {\n      const { quiz } = this.props;\n\n      if (!quiz.completed || !quiz.questions.length) {\n        this.props.history.push('/');\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  quiz: state.quiz\n});\n\nexport default connect(mapStateToProps)(withRedirectIfQuizIncomplete(ResultsComponent));","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n/**\n * @function HomeComponent\n * The first page that users see when they open up the app\n * shows the name of the game, instructions, and a button to start the game.\n * @returns JSX.Element\n */\n\nconst HomeComponent = (): JSX.Element => {\n  return (\n    <div className=\"intro-container\">\n      <h2 className=\"heading\">Welcome to Trivia Night!</h2>\n      <h5 className=\"introduction\">You will be presented with 10 True or False questions.</h5>\n      <h5 className=\"question\">Can you score 100%?</h5>\n      <Link id=\"start-btn\" className=\"btn btn-lg btn-success\" to=\"/quiz\">\n        <i className=\"fa fa-play-circle\"></i> BEGIN\n      </Link>\n    </div>\n  )\n};\n\nexport default HomeComponent;","import React from 'react';\n\n/**\n * @function LoadingComponent\n * A loading component to be showng while the app is loading data\n * extracted the component for use in lazy loading in the future.\n * @returns JSX.Element\n */\n\nconst LoadingComponent = (): JSX.Element => {\n  return (\n    <img src=\"/img/loading.svg\" alt=\"loading...\" />\n  )\n};\n\nexport default LoadingComponent;","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { History } from 'history';\nimport { DispatchProps, StateProps } from './QuizContainer';\nimport LoadingComponent from '../common/LoadingComponent';\nimport './QuizComponent.css';\n\n/**\n * @function QuizErrorComponent\n * A component to show when the quiz has encountered erors during loading.\n * @returns JSX.Element\n */\n\nexport const QuizErrorComponent = () => {\n  return <h1 className=\"quiz-fetch-error\">An error occured while loading the game.</h1>;\n};\n\n/**\n * @function StartOverLink\n * A memoized \"Start Over\" link component instead of re-rendering on each new question\n * a bit of an overkill for such a small component but using it for illustration purposes.\n * @returns JSX.Element (memoized)\n */\nexport const StartOverLink = React.memo(() => (\n  <Link className=\"mx-auto restart-btn\" to=\"/\">\n    <i className=\"fa fa-redo\"></i> Start Over\n  </Link>\n));\n\n/**\n * @function QuestionPagination\n * Responsible for showing the question number the user is on, as well as the total number of questions.\n * @param currentQuestionIndex\n * @param totalNumOfQuestions\n * @returns JSX.Element\n */\n\ninterface QuestionPaginationProps {\n  currentQuestionIndex: number;\n  totalNumOfQuestions: number\n}\n\nexport const QuestionPagination: React.FC<QuestionPaginationProps> = ({\n  currentQuestionIndex,\n  totalNumOfQuestions\n}) => {\n  return <p>{currentQuestionIndex + 1} of {totalNumOfQuestions}</p>\n};\n\n/**\n * @function UserResponseButtons\n * Renders the TRUE and FALSE buttons which are responsible\n * for answering the quiz and advancing to the next question\n * @param props\n * @returns JSX.Element\n */\n\ninterface UserResponseButtonsProps {\n  handleUserResponse: (answer: boolean) => void\n}\n\nexport const UserResponseButtons: React.FC<UserResponseButtonsProps> = ({ handleUserResponse }) => (\n  <div className=\"response-buttons-container\">\n    <button className=\"btn btn-md btn-success\" onClick={() => handleUserResponse(true)}>\n      <i className=\"fa fa-thumbs-up\"></i> TRUE\n    </button>\n    <button className=\"btn btn-md btn-danger\" onClick={() => handleUserResponse(false)}>\n      <i className=\"fa fa-thumbs-down\"></i> FALSE\n    </button>\n  </div>\n);\n\n/**\n * @function QuizComponent\n * The main component that fetches the quiz from the api and render the quiz to the user\n * @param props\n * @return JSX.Element\n */\n\ninterface QuizComponentProps extends DispatchProps, StateProps {\n  history: History;\n}\n\nconst QuizComponent: React.FC<QuizComponentProps> = ({\n  history,\n  quiz: { questions, loading, error },\n  fetchQuiz,\n  submitAnswer\n}) => {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n\n  const handleUserResponse = (userResponse: boolean) => {\n    submitAnswer({\n      questionIndex: currentQuestionIndex,\n      userResponse\n    });\n\n    setCurrentQuestionIndex(current => current + 1);\n\n    if (currentQuestionIndex === questions.length - 1) {\n      history.push('/results'); // show results if user has answered all questions\n    };\n  };\n\n  useEffect(() => {\n    fetchQuiz();\n  }, [fetchQuiz]);\n\n  if (error) { return <QuizErrorComponent />; }\n  if (loading) { return <LoadingComponent />; }\n\n  const {\n    category,\n    question\n  } = questions[currentQuestionIndex];\n\n  return (\n    <div className=\"quiz-container\">\n      <h2 className=\"category\">{category}</h2>\n      <h5 className=\"question\">{question}</h5>\n      <QuestionPagination currentQuestionIndex={currentQuestionIndex} totalNumOfQuestions={questions.length} />\n      <UserResponseButtons handleUserResponse={handleUserResponse} />\n      <StartOverLink />\n    </div>\n  );\n};\n\nexport default QuizComponent;","import Axios from 'axios';\nimport { decode } from 'he';\nimport { ThunkDispatch, ThunkAction } from 'redux-thunk';\nimport { AppState } from './../../../reducers';\nimport {\n  Question,\n  FetchQuizFailedAction,\n  FetchQuizRequestAction,\n  FetchQuizSuccessAction,\n  FetchQuizActions,\n} from './types';\nimport {\n  fetchQuizRequest,\n  fetchQuizSuccess,\n  fetchQuizFailed,\n  submitAnswer\n} from './actions';\n\n/**\n * @function fetchQuiz\n * A thunk action that dispatches actions in the following order:\n * fetchQuizRequest > fetchQuizRequestSuccess (if the request is successful), or\n * fetchQuizRequest > fetchQuizRequestFailed (if the request failed)\n * @returns ThunkAction\n */\n\nexport const fetchQuiz = (): ThunkAction<Promise<void>, AppState, void, FetchQuizActions> => {\n  return (dispatch: ThunkDispatch<{}, {}, FetchQuizActions>): Promise<void> => {\n    dispatch<FetchQuizRequestAction>(fetchQuizRequest());\n\n    return Axios.get<Question[]>('https://opentdb.com/api.php?amount=10&difficulty=hard&type=boolean')\n      .then((res: any) => {\n        const questions: Question[] = res.data.results.map((question: any, index: number) => ({\n          id: index,\n          category: decode(question.category),\n          question: decode(question.question),\n          correctAnswer: decode(question.correct_answer).toLowerCase() === \"true\" ? true : false,\n          userResponse: null\n        }));\n\n        dispatch<FetchQuizSuccessAction>(fetchQuizSuccess(questions));\n      })\n      .catch((error: Error) => {\n        dispatch<FetchQuizFailedAction>(fetchQuizFailed(error));\n      });\n  };\n};\n\nexport default {\n  fetchQuiz,\n  submitAnswer\n};","import * as actionTypes from './actionTypes';\nimport {\n  UserResponse,\n  FetchQuizRequestAction,\n  FetchQuizFailedAction,\n  FetchQuizSuccessAction,\n  SubmitAnswerAction\n} from './types';\n\n/**\n * @function fetchQuizRequest\n * An action creator for the FETCH_QUIZ_REQUEST action.\n * @returns FetchQuizRequestAction\n */\n\nexport const fetchQuizRequest = (): FetchQuizRequestAction => {\n  return {\n    type: actionTypes.FETCH_QUIZ_REQUEST\n  };\n};\n\n/**\n * @function fetchQuizSuccess\n * An action creator for the FETCH_QUIZ_SUCCESS action.\n * @param questions\n * @returns FetchQuizSuccessAction\n */\n\nexport const fetchQuizSuccess = (questions: any): FetchQuizSuccessAction => {\n  return {\n    type: actionTypes.FETCH_QUIZ_SUCCESS,\n    payload: questions\n  };\n};\n\n/**\n * @function fetchQuizFailed\n * An action creator for the FETCH_QUIZ_FAILED action.\n * @param error\n * @returns FetchQuizFailedAction\n */\n\nexport const fetchQuizFailed = (error: Error): FetchQuizFailedAction => {\n  return {\n    type: actionTypes.FETCH_QUIZ_FAILED,\n    payload: error\n  };\n};\n\n/**\n * @function submitAnswer\n * An action creator for the SUBMIT_ANSWER action.\n * @param userResponse\n * @returns SubmitAnswerAction\n */\n\nexport const submitAnswer = (userResponse: UserResponse): SubmitAnswerAction => {\n  return {\n    type: actionTypes.SUBMIT_ANSWER,\n    payload: userResponse\n  };\n};","/**\n * Action types for the quizReducer\n * could alternatively use an action type creator library \n * when more types are added to help reduce redundant typing.\n */\n\nexport const FETCH_QUIZ_REQUEST = 'FETCH_QUIZ_REQUEST';\nexport const FETCH_QUIZ_SUCCESS = 'FETCH_QUIZ_SUCCESS';\nexport const FETCH_QUIZ_FAILED = 'FETCH_QUIZ_FAILED';\nexport const SUBMIT_ANSWER = 'SUBMIT_ANSWER';","import { submitAnswer } from './duck/actions';\nimport { Quiz } from './duck/types';\nimport { connect } from 'react-redux';\nimport { AppState } from './../../reducers';\nimport QuizComponent from \"./QuizComponent\";\nimport operations from './duck/operations';\n\nexport interface StateProps {\n  quiz: Quiz;\n}\n\nexport interface DispatchProps {\n  fetchQuiz: Function;\n  submitAnswer: typeof submitAnswer;\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  quiz: state.quiz\n});\n\nconst mapDispatchToProps: DispatchProps = {\n  fetchQuiz: operations.fetchQuiz,\n  submitAnswer: operations.submitAnswer\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(QuizComponent);","import React from 'react';\nimport { Question, Quiz } from '../quiz/duck/types';\n\n/**\n * @function QuestionResponseRow\n * Shows ONE question and the user's corresponding answer\n * @param props\n * @returns JSX.Element\n */\n\ninterface QuestionResponseRowProps {\n  question: Question;\n  correctness: boolean;\n  userResponse: boolean | null;\n}\n\nconst QuestionResponseRow: React.FC<QuestionResponseRowProps> = ({\n  question,\n  correctness,\n  userResponse\n}): JSX.Element => {\n  return (\n    <div className=\"question-row\">\n      <div className=\"question\">\n        {question.id + 1}. {question.question}\n      </div>\n      <div className={`user-response ${correctness ? 'correct' : 'incorrect'}`}>\n        <i className={`fa ${correctness ? 'fa-check' : 'fa-times'}`}></i>\n        You answered: {userResponse ? 'TRUE' : 'FALSE'}\n      </div>\n    </div>\n  )\n};\n\n/**\n * @function QuestionResponseComponent\n * Shows ALL of the questions and user's responses. \n * @param props\n * @returns JSX.Element\n */\n\ninterface QuestionResponseProps {\n  quiz: Quiz\n}\n\nconst QuestionResponseComponent: React.FC<QuestionResponseProps> = ({ quiz }) => {\n  return (\n    <div className=\"question-response-container\">\n      {quiz.questions.map((q: Question) => (\n        <QuestionResponseRow\n          key={q.id}\n          question={q}\n          correctness={q.userResponse === q.correctAnswer}\n          userResponse={q.userResponse}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default QuestionResponseComponent;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Quiz } from '../quiz/duck/types';\nimport QuestionResponseComponent from './QuestionResponseComponent';\nimport './ResultsComponent.css';\n\n/**\n * @function ResultsComponent\n * Shows the score and detailed responses to each question asked in the quiz\n * as well as a PLAY AGAIN button that will restart the game. \n * @param props\n * @returns JSX.Element\n */\n\ninterface ResultsComponentProps {\n  quiz: Quiz;\n}\n\nconst ResultsComponent: React.FC<ResultsComponentProps> = ({ quiz }): JSX.Element => {\n  return (\n    <div className=\"results-container\">\n      <h2>\n        You scored <br />\n        <span>{quiz.score}/{quiz.questions.length}</span>\n      </h2>\n      <QuestionResponseComponent quiz={quiz} />\n      <Link className=\"btn btn-lg btn-success\" to='/'>PLAY AGAIN</Link>\n    </div>\n  )\n};\n\nexport default ResultsComponent;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n/**\n * @function NotFoundComponent\n * The page not found component to show when a user navigates to \n * a page that is not defined in the app router.\n * @returns JSX.Element\n */\n\nconst NotFoundComponent: React.FC = () => {\n  return (\n    <div>\n      <h1>404</h1>\n      <h5>Sorry, the page you are looking for does not exist!</h5>\n      <Link to='/'>Home Page</Link>\n    </div>\n  )\n}\n\nexport default NotFoundComponent;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport HomeComponent from './home/HomeComponent';\nimport QuizContainer from './quiz/QuizContainer';\nimport ResultsContainer from './results/ResultsContainer';\nimport NotFoundComponent from './common/NotFoundComponent';\nimport './App.css';\n\n/**\n * @function App\n * A list of routes are listed in this component for the BrowserRouter \n * provided in RootComponent.\n * @returns Routes\n */\nconst App: React.FC = () => {\n  return (\n    <Switch>\n      <Route exact path='/' component={HomeComponent} />\n      <Route path='/quiz' component={QuizContainer} />\n      <Route path='/results' component={ResultsContainer} />\n      <Route component={NotFoundComponent} />\n    </Switch>\n  );\n};\n\nexport default App;","import React from 'react';\n\ninterface ErrorBoundaryProps {\n  children: JSX.Element;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n}\n\n/**\n * @class ErrorBoundary\n * An Error Boundary to catch any UI errors and gracefully show an error page.\n * @param ErrorBoundaryProps\n * @returns JSX.Element\n */\n\nclass ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true };\n  }\n\n  refreshPage() {\n    window.location.reload(false);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"error-boundary-container\">\n          <h2>Oops... an error occured, please refresh the page and try again!</h2>\n          <button onClick={this.refreshPage} className=\"btn btn-lg btn-primary\">\n            <i className=\"fa fa-refresh\"></i> Refresh\n          </button>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import { Reducer } from 'react';\nimport { Quiz, FetchQuizActions } from './types';\nimport * as actionTypes from './actionTypes';\n\nexport const initialState: Quiz = {\n  score: 0,\n  questions: [],\n  loading: true,\n  completed: false,\n  error: false\n};\n\n/**\n * @function quizReducer\n * A reducer for questions, responsible for fetching questions from the provided API or fail\n * @param state\n * @param action\n */\nexport const quizReducer: Reducer<Quiz, FetchQuizActions> = (state = initialState, action): Quiz => {\n  switch (action.type) {\n    case actionTypes.FETCH_QUIZ_REQUEST:\n      return initialState;\n\n    case actionTypes.FETCH_QUIZ_SUCCESS:\n      return { ...state, loading: false, questions: action.payload };\n\n    case actionTypes.FETCH_QUIZ_FAILED:\n      return { ...state, loading: false, error: action.payload };\n\n    case actionTypes.SUBMIT_ANSWER:\n      const newState = { ...state };\n      const { questionIndex, userResponse } = action.payload;\n      newState.questions[questionIndex].userResponse = userResponse;\n\n      if (questionIndex === newState.questions.length - 1) {\n        newState.completed = true;\n      };\n\n      if (newState.questions[questionIndex].userResponse === newState.questions[questionIndex].correctAnswer) {\n        newState.score = newState.score + 1;\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { Quiz } from './app/quiz/duck/types';\nimport { quizReducer } from './app/quiz/duck/reducers';\n\n/**\n * The root reducer for the application store\n * using combineReducers despite only having reducer for \n * future expandability.\n */\n\nconst rootReducer = combineReducers({\n  quiz: quizReducer\n});\n\nexport interface AppState {\n  quiz: Quiz\n};\n\nexport default rootReducer;","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\n\nexport const middlewares = [thunk];\n\nconst store = createStore(rootReducer, {}, applyMiddleware(...middlewares));\n\nexport default store;","import React from 'react';\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from 'react-router-dom';\nimport ErrorBoundary from './app/common/ErrorBoundary';\nimport store from \"./store\";\n\n/**\n * @function RootComponent\n * The root level component responsible for providing\n * an error boundary, the redux store, and a router to the application. \n * @param props\n * @returns JSX.Element\n */\n\ninterface RootComponentProps {\n  children?: JSX.Element\n}\n\nconst RootComponent: React.FC<RootComponentProps> = props => {\n  return (\n    <ErrorBoundary>\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"container-fluid\">\n            <img src=\"/img/logo.png\" className=\"logo mx-auto\" alt=\"logo\" />\n            <div className=\"offset-md-3 col-sm-6\">\n              <div className=\"app\">\n                {props.children}\n              </div>\n            </div>\n          </div>\n        </BrowserRouter>\n      </Provider >\n    </ErrorBoundary >\n  )\n};\n\nexport default RootComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport RootComponent from './RootComponent';\nimport * as serviceWorker from './serviceWorker';\nimport 'font-awesome/css/font-awesome.min.css';\n\nReactDOM.render(\n  <RootComponent>\n    <App />\n  </RootComponent>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}